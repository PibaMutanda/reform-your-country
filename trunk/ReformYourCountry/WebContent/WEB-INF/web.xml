<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>ReformYourCountry</display-name>
 		<welcome-file-list>
        	<welcome-file>/home</welcome-file><!-- I don't know why, but when we call the root of the website, the dispatcher don't intercept it, so
        	we call it from another requestmapping that we add to the welcome-file-list -->
        </welcome-file-list>


<!-- *** SERVLETS *** -->
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/views/page-not-found.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/error</location>  <!-- ErrorController -->
	</error-page>
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- followings doesn't need to be parse by the dispatcher -->
	<servlet-mapping> <!-- flash -->
		<servlet-name>default</servlet-name>
		<url-pattern>*.swf</url-pattern>
	</servlet-mapping>
	<servlet-mapping> <!-- icon -->
		<servlet-name>default</servlet-name>
		<url-pattern>*.ico</url-pattern>
	</servlet-mapping>
	<servlet-mapping> <!-- css -->
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping> <!-- javascript -->
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	    <servlet-mapping> <!-- web page -->
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <servlet-mapping> <!-- xml file -->
        <servlet-name>default</servlet-name>
        <url-pattern>*.xml</url-pattern>
    </servlet-mapping>
	<servlet-mapping> <!-- image -->
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping> <!-- image -->
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping> <!-- image -->
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
    <servlet-mapping> <!-- font -->
        <servlet-name>default</servlet-name>
        <url-pattern>*.woff</url-pattern>
    </servlet-mapping>
    <servlet-mapping> <!-- font -->
        <servlet-name>default</servlet-name>
        <url-pattern>*.tff</url-pattern>
    </servlet-mapping>
    <servlet-mapping> <!-- font -->
        <servlet-name>default</servlet-name>
        <url-pattern>*.eot</url-pattern>
    </servlet-mapping>
    
	<!-- first we tried with "*.html" or "/helptxt/*.html" but it didn't work, the home page wasn't 
		  accessible with the simple "/" in the url (http://localhost:8080/ReformYourCountry/) -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/helptxt/*</url-pattern>
	</servlet-mapping>

<!-- *** FILTERS *** -->
    <!-- see http://stackoverflow.com/questions/2958497/encoding-problem-using-spring-mvc 
        filter to force UTF-8 when receiving data from html form because their requestmethod are post 
        and URIEncoding in server.xml only cover GET method-->
    <filter>
        <filter-name>encoding-filter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>encoding-filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    
	<filter>
		<filter-name>JpaFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>JpaFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter>
		<filter-name>ContextUtil</filter-name>
		<filter-class>reformyourcountry.web.ContextUtil</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>ContextUtil</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 	SecurityFilter need to be after ContextUtil -->
	<filter>
		<filter-name>SecurityFilter</filter-name>
		<filter-class>reformyourcountry.web.SecurityFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>SecurityFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
		<init-param>
			<param-name>debug.pagewriter</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>



	<!-- LISTENERS -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/classes/applicationContext.xml</param-value>
	</context-param>

	<listener>
		<listener-class>reformyourcountry.web.ContextUtil</listener-class>
	</listener>

	<listener>
		<listener-class>reformyourcountry.web.PropertyLoaderServletContextListener</listener-class>
	</listener>
</web-app>